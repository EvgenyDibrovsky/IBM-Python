# Шпаргалка: Практики кодирования Python и концепции пакетирования

# Packaging (Создание пакета)
# Чтобы создать пакет, структура папок должна быть следующей:
# Корневая папка проекта → Имя пакета → __init__.py, module_1.py, module_2.py и т.д.
# В файле __init__.py добавьте код для ссылки на модули в пакете.

# module1.py
def function_1(arg):
    return <operation output>

# __init__.py:
from . import function_1

# Python Style Guide (Руководство по стилю Python)
# Четыре пробела для отступов
# Используйте пустые строки для разделения функций и классов
# Используйте пробелы вокруг операторов и после запятых
# Добавляйте большие блоки кода внутри функций
# Называйте функции и файлы в нижнем регистре с подчеркиваниями
# Называйте классы в CamelCase
# Называйте константы заглавными буквами с подчеркиваниями

def function_1(a, b):
    if a > b:
        c = c + 5
    else:
        c = c - 3
    return c

# Constant Definition example
MAX_FILE_UPLOAD_SIZE

# Static Code Analysis (Статический анализ кода)
# Используйте метод статического анализа кода для оценки вашего кода по заранее определенному стилю и стандарту без его выполнения.
# Например, используйте Pylint для статического анализа кода.
# Shell code:
pylint code.py

# Unit Testing (Модульное тестирование)
# Модульное тестирование - это метод для проверки работы отдельных блоков кода как задумано.
# В процессе разработки каждый блок кода тестируется отдельно. 
# Модуль тестируется в среде непрерывной интеграции/непрерывной доставки.
# Вы можете использовать различные тестовые функции для построения модульных тестов и анализировать результаты тестов, чтобы определить, прошли ли они успешно.

import unittest
from mypackage.mymodule import my_function

class TestMyFunction(unittest.TestCase):
    def test_my_function(self):
        result = my_function(<args>)
        self.assertEqual(result, <response>)

unittest.main()
