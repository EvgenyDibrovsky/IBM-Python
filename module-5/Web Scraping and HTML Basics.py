# Web Scraping и Основы HTML

# Введение в web scraping
# Web scraping - это процесс извлечения информации с веб-сайтов или веб-страниц.

# Как работает web scraping
# Процесс начинается с HTTP-запроса, затем сервер возвращает HTML-содержимое веб-страницы, которое затем парсится и обрабатывается для извлечения данных.

# Дерево документа
# HTML-структура веб-страниц можно визуализировать как дерево с тегами в качестве узлов.

# Основы HTML
# <html> - корневой элемент HTML-страницы.
# <head> содержит мета-информацию о странице.
# <body> отображает контент веб-страницы.
# <h3>, <p> - теги для заголовков и параграфов.
# Теги HTML могут содержать атрибуты с дополнительной информацией.

# HTML таблицы
# <table> - тег для определения таблицы.
# <tr>, <th>, <td> - теги для строк, заголовков и ячеек таблицы.

# Web scraping с использованием Python и BeautifulSoup
# Для web scraping используются Python и библиотеки Requests и BeautifulSoup.

import requests
from bs4 import BeautifulSoup

# Получение и парсинг HTML
# Пример извлечения HTML-содержимого веб-страницы и его парсинга:

url = 'https://en.wikipedia.org/wiki/IBM'
response = requests.get(url)
html_content = response.text
soup = BeautifulSoup(html_content, 'html.parser')
print(html_content[:500])  # Выводит часть HTML-кода

# Навигация по HTML-структуре
# Пример извлечения и печати текста всех тегов <a>:

links = soup.find_all('a')
for link in links:
    print(link.text)

# Извлечение определенных данных
# Пример использования BeautifulSoup для навигации по HTML и извлечения конкретной информации.

# Использование pandas для извлечения таблиц
# Pandas предоставляет функцию read_html для автоматического извлечения данных из таблиц на веб-сайтах.
