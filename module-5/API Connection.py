# API Connection in Python

# Introduction to APIs
# API (Application Programming Interface) действует как мост, позволяющий одному приложению взаимодействовать с другим.

# Что такое API и как они работают?
# API - это набор определений и протоколов для построения и интеграции приложений. 
# API позволяет разным системам взаимодействовать друг с другом.

# Элементы API:
# 1. Endpoint: URL или URI, представляющий определенную функцию API.
# 2. Методы запроса: GET, POST, PUT, DELETE для указания действия.
# 3. Заголовки запроса: Дополнительная информация о запросе.
# 4. Тело запроса: Данные, отправляемые на сервер.
# 5. Коды состояния ответа: Указывают на успех или неудачу операции.
# 6. Аутентификация: Механизмы для проверки подлинности запроса.
# 7. Документация: Инструкции по использованию API.

# Структура URL API:
# Пример URL API: https://api.example.com/v1/get/json.xml?parameter1=value1&parameter2=value2
# - URI: Определяет имя или ресурс в интернете.
# - URL: Тип URI, обеспечивающий доступ к ресурсу.
# - Схема: Протокол, например, https://
# - Маршрут: Местоположение на сервере, например, /v1/get/json.xml

# Что такое NBA_API?
# NBA_API предоставляет доступ к статистике и данным Национальной баскетбольной ассоциации (NBA).

# API vs REST API
# - API: Набор протоколов для создания приложений. Может использовать различные методы связи.
# - REST API: Тип веб-API, следующий принципам REST. Использует стандартные HTTP-методы.

# Как получить доступ к публичным API:
# Чтобы использовать публичный API в Python, нужно знать URL API-эндпойнта.

# Пример использования публичного API:
import requests
import json

url = "https://www.fishwatch.gov/api/species"
data = requests.get(url)
results = json.loads(data.text)

# Примечание: конкретный эндпойнт, к которому вы хотите получить доступ, может отличаться для каждого API.
